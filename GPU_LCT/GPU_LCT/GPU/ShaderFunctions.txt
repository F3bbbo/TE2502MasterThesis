//-----------------------------------------------------------
// Access Functions
//-----------------------------------------------------------
void get_face(int face_i, out vec2 face_v[3])
{
	face_v[0] = point_positions[sym_edges[tri_symedges[face_i].x].vertex];
	face_v[1] = point_positions[sym_edges[sym_edges[tri_symedges[face_i].x].nxt].vertex];
	face_v[2] = point_positions[sym_edges[sym_edges[sym_edges[tri_symedges[face_i].x].nxt].nxt].vertex];
}

//-----------------------------------------------------------
// SymEdge funcitons
//-----------------------------------------------------------

vec2 get_vertex(int index)
{
	return point_positions[index];
}

SymEdge get_symedge(int index)
{
	return sym_edges[index];
}

int nxt(int edge)
{
	return sym_edges[edge].nxt;
}

SymEdge nxt(SymEdge s)
{
	return get_symedge(s.nxt);
}

int rot(int edge)
{
	return sym_edges[edge].rot;
}

SymEdge rot(SymEdge s)
{
	return get_symedge(s.rot);
}

int sym(int edge)
{
	return rot(nxt(edge));
}

SymEdge sym(SymEdge s)
{
	return rot(nxt(s));
}

int prev(int edge)
{
	return nxt(nxt(edge));
}

SymEdge prev(SymEdge s)
{
	return nxt(nxt(s));
}

int crot(int edge)
{
	int sym_i = sym(edge);
	return (sym_i != -1) ? nxt(sym_i) : -1;
}
SymEdge prev_symedge(in SymEdge s)
{
	return get_symedge(get_symedge(s.nxt).nxt);
}
bool face_contains_vertice(int face, int vertex)
{
	SymEdge s = sym_edges[tri_symedges[face].x];
	return s.vertex == vertex || get_symedge(s.nxt).vertex == vertex || prev_symedge(s).vertex == vertex;
}
int get_index(SymEdge s)
{
	return prev_symedge(s).nxt;
}
int get_face_vertex_symedge(int face, int vertex)
{
	SymEdge s = sym_edges[tri_symedges[face].x];
	if (s.vertex == vertex)
		return get_index(s);
	else if (get_symedge(s.nxt).vertex == vertex)
		return s.nxt;
	else if (prev_symedge(s).vertex == vertex)
		return get_index(prev_symedge(s));
	else
		return -1;
}

//-----------------------------------------------------------
// Intersection Functions
//-----------------------------------------------------------
vec2 project_point_on_line(vec2 point, vec2 a, vec2 b)
{
	vec2 ab = normalize(b - a);
	vec2 ap = point - a;
	return a + dot(ap, ab) * ab;
}

bool point_ray_test(vec2 p1, vec2 r1, vec2 r2, float epsi = EPSILON)
{
	vec2 dist_vec = project_point_on_line(p1, r1, r2);
	return abs(distance(dist_vec, p1)) < epsi ? true : false;
}


bool point_line_test(in vec2 p1, in vec2 s1, in vec2 s2, float epsi = EPSILON)
{
	vec2 dist_vec = project_point_on_line(p1, s1, s2);
	if (!point_ray_test(p1, s1, s2, epsi))
		return false;
	vec2 v1 = s1 - p1;
	vec2 v2 = s1 - s2;
	float dot_p = dot(v1, v2);
	if (dot_p < epsi * epsi)
		return false;
	if (dot_p > (dot(v2, v2) - epsi * epsi))
		return false;

	return true;
}

int orientation(vec2 p1, vec2 p2, vec2 p3)
{
	float val = (p2.y - p1.y) * (p3.x - p2.x) - (p2.x - p1.x) * (p3.y - p2.y);

	if (val == 0.0f) return 0;
	return (val > 0.0f) ? 1 : 2; // Clockwise : Counter Clockwise
}

bool line_seg_intersection_ccw(vec2 p1, vec2 q1, vec2 p2, vec2 q2)
{
	int o1 = orientation(p1, q1, p2);
	int o2 = orientation(p1, q1, q2);
	int o3 = orientation(p2, q2, p1);
	int o4 = orientation(p2, q2, q1);

	if (o1 != o2 && o3 != o4)
		return true;

	return false;
}

float vec2_cross(in vec2 v, in vec2 w)
{
	return v.x*w.y - v.y*w.x;
}

bool line_line_test(vec2 p1, vec2 p2, vec2 q1, vec2 q2, float epsi = EPSILON)
{
	// solution found:
	//https://stackoverflow.com/questions/563198/how-do-you-detect-where-two-line-segments-intersect
	vec2 s = p2 - p1;
	vec2 r = q2 - q1;
	float rs = vec2_cross(s, r);
	vec2 qp = (q1 - p1);
	float qpr = vec2_cross(qp, r);
	if (abs(rs) < epsi && abs(qpr) < epsi) // case 1
	{
		float r2 = dot(r, r);
		float t0 = dot((q1 - p1), r) / r2;
		float sr = dot(s, r);
		float t1 = t0 + (sr / r2);
		if (sr < 0.0f)
		{
			float tmp = t0;
			t0 = t1;
			t1 = tmp;
		}
		if ((t0 < 0.0f && t1 < 0.0f) || t0 > 1.0f && t1 > 1.0f)
			return false;
		else
			return true;
	}
	else if (abs(rs) < epsi && !(abs(qpr) < epsi)) // case 2
	{
		return false;
	}
	else // case 3
	{
		float u = qpr / rs;
		float t = vec2_cross(qp, s) / rs;
		if ((0.0f - epsi) < u && u < (1.0f + epsi) && (0.0f - epsi) < t && t < (1.0f + epsi))
			return true;
	}
	return false;
}

float sign(vec2 p1, vec2 p2, vec2 p3)
{
	return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y);
}

bool point_triangle_test(vec2 p1, vec2 t1, vec2 t2, vec2 t3, float epsi = EPSILON)
{

	float d1, d2, d3;
	bool has_neg, has_pos;

	d1 = sign(p1, t1, t2);
	d2 = sign(p1, t2, t3);
	d3 = sign(p1, t3, t1);

	has_neg = (d1 < 0) || (d2 < 0) || (d3 < 0);
	has_pos = (d1 > 0) || (d2 > 0) || (d3 > 0);

	return !(has_neg && has_pos);
}

bool segment_triangle_test(vec2 p1, vec2 p2, vec2 t1, vec2 t2, vec2 t3)
{
	if (point_triangle_test(p1, t1, t2, t3) && point_triangle_test(p2, t1, t2, t3)) {
		// If triangle contains both points of segment return true
		return true;
	}
	if (line_seg_intersection_ccw(p1, p2, t1, t2) ||
		line_seg_intersection_ccw(p1, p2, t2, t3) ||
		line_seg_intersection_ccw(p1, p2, t3, t1)) {
		// If segment intersects any of the edges of the triangle return true
		return true;
	}
	// Otherwise segment is missing the triangle
	return false;
}

//-----------------------------------------------------------
// Functions
//-----------------------------------------------------------
void oriented_walk(inout int curr_e, int point_i, out bool on_edge)
{
	bool done = false;
	vec2 goal = point_positions[point_i];
	int iter = 0;
	on_edge = false;
	while (!done) {
		on_edge = false;
		// Loop through triangles edges to check if point is on the edge 
		for (int i = 0; i < 3; i++)
		{
			bool hit = false;
			hit = point_line_test(goal,
				point_positions[sym_edges[curr_e].vertex],
				point_positions[sym_edges[sym_edges[curr_e].nxt].vertex]);
			if (hit)
			{
				on_edge = true;
				return;
			}
			curr_e = sym_edges[curr_e].nxt;
		}
		// calculate triangle centroid
		vec2 tri_points[3];
		get_face(sym_edges[curr_e].face, tri_points);
		vec2 tri_cent = (tri_points[0] + tri_points[1] + tri_points[2]) / 3.0f;
		// Loop through edges to see if we should continue through the edge
		// to the neighbouring triangle 
		bool line_line_hit = false;
		for (int i = 0; i < 3; i++)
		{
			line_line_hit = line_seg_intersection_ccw(
				tri_cent,
				goal,
				point_positions[sym_edges[curr_e].vertex],
				point_positions[sym_edges[sym_edges[curr_e].nxt].vertex]);

			if (line_line_hit)
			{
				break;
			}
			curr_e = sym_edges[curr_e].nxt;
		}

		if (line_line_hit)
		{
			curr_e = nxt(sym_edges[sym_edges[curr_e].nxt].rot); // sym
		}
		else
		{
			return;
		}
	}
}

bool valid_point_into_face(int face, vec2 p)
{
	int curr_e = tri_symedges[face].x;
	for (int i = 0; i < 3; i++)
	{
		SymEdge curr_sym = sym_edges[curr_e];
		vec2 s1 = point_positions[curr_sym.vertex];
		vec2 s2 = point_positions[sym_edges[nxt(curr_e)].vertex];
		if (point_line_test(p, s1, s2) && edge_label[curr_sym.edge] == 3)
		{
			int e_sym = sym(curr_e);
			if (e_sym > -1)
			{
				vec2 tri_points[3];
				get_face(sym_edges[e_sym].face, tri_points);
				if (point_ray_test(tri_points[0], tri_points[1], tri_points[2]))
				{
					return false;
				}
			}
		}
	}
	return true;
}

bool is_flippable(int e)
{
	int e_sym = sym(e);
	if (e_sym > -1)
	{
		vec2 a = point_positions[sym_edges[e_sym].vertex];
		vec2 d = point_positions[sym_edges[prev(e_sym)].vertex];

		vec2 c = point_positions[sym_edges[e].vertex];
		vec2 b = point_positions[sym_edges[prev(e)].vertex];
		// first check so the new triangles will not be degenerate
		if (point_ray_test(a, d, b) || point_ray_test(c, d, b))
			return false;
		// then check so they will not overlap other triangles
		return line_line_test(a, c, b, d);
	}
	return false;
}

//-----------------------------------------------------------
// Math Functions
//-----------------------------------------------------------
vec2 get_face_center(int face_i)
{
	vec2 face_v[3];
	face_v[0] = point_positions[sym_edges[tri_symedges[face_i].x].vertex];
	face_v[1] = point_positions[sym_edges[sym_edges[tri_symedges[face_i].x].nxt].vertex];
	face_v[2] = point_positions[sym_edges[sym_edges[sym_edges[tri_symedges[face_i].x].nxt].nxt].vertex];

	return (face_v[0] + face_v[1] + face_v[2]) / 3.f;
}

